plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    {{#if unified_publishing}}
    id "me.shedaniel.unified-publishing" version "0.1.+"
    {{/if}}
}

architectury {
    platformSetupLoomIde()
    forge()
}

base {
    archivesName = "{{mod_id}}-forge-${minecraft_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "{{ mod_id }}.forge.mixins.json"
        mixinConfig "{{ mod_id }}.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge libs.forge
    modApi libs.architectury.forge
    annotationProcessor libs.mixin.extras.common
    implementation libs.mixin.extras.common
    implementation libs.mixin.extras.forge
    include libs.mixin.extras.forge
    modImplementation libs.jamlib.forge

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}
{{#if unified_publishing}}

if (System.getenv("CURSEFORGE_API_KEY") != null && System.getenv("MODRINTH_API_KEY") != null) {
// Uncomment these lines and fill in the IDs when ready to publish :)
//    unifiedPublishing {
//        project {
//            displayName = "V${project.version} (Forge ${project.minecraft_version})"
//            changelog = rootProject.file("CHANGELOG.md").text
//            releaseType = project.version.contains("beta") ? "beta" : "release"
//            gameVersions = [project.minecraft_version]
//            gameLoaders = ["forge"]
//
//            mainPublication tasks.jar
//
//            curseforge {
//                token = System.getenv("CURSEFORGE_API_KEY")
//                id = ""
//                gameLoaders.add("NeoForge")
//            }
//
//            modrinth {
//                token = System.getenv("MODRINTH_API_KEY")
//                id = ""
//                gameLoaders.add("neoforge")
//            }
//        }
//    }
}
{{/if}}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
